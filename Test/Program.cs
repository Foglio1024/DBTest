using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using TCTSniffer;

namespace Test
{
    public enum EventType
    {
        Field = 3,
        Dungeon = 4,
        BattleField = 5
    }
    public enum QuestType
    {
        daily
    }
    public enum CompensationType
    {
        item,
        money,
        exp,
        reputationPoint
    }
    public class Event
    {
        public int id { get; }
        public EventType type { get; }
        public bool active { get; }
        public int categoryId { get; }
        public int questGroupId { get; }
        public int questNumId { get; }
        public bool repeat { get; }
        public int requiredItemLevel { get; }

        public Event(string _id, string _type, string _active, string catId, string qId, string rep, string ilvl)
        {
            int var;
            Int32.TryParse(_id, out var);
            id = var;
            type = (EventType)System.Enum.Parse(typeof(EventType), _type);
            active = Boolean.Parse(_active);
            Int32.TryParse(catId, out var);
            categoryId = var;
            Int32.TryParse(qId.Substring(0,4), out var);
            questGroupId = var;
            Int32.TryParse(qId.Substring(4), out var);
            questNumId = var;
            repeat = Boolean.Parse(rep);
            Int32.TryParse(ilvl, out var);
            requiredItemLevel = var;
        }
        public Event() { }
    }
    public class Quest
    {
        public int id { get; }
        public int nameId { get; }
        public QuestType type { get; }
        public int minLevel { get; }
        public int groupId { get; }
        public int realHuntingZone { get; }
        public int suitableLevel { get; }

        public Quest(string _id, string _name, string _type, string minL, string gId, string rHZ, string suitL)
        {
            int var;

            Int32.TryParse(_id, out var);
            id = var;

            type = (QuestType)System.Enum.Parse(typeof(QuestType), _type);

            string _nameid = _name.Replace("@DailyPlayGuideQuest:", "");
            Int32.TryParse(_nameid, out var);
            nameId = var;

            Int32.TryParse(minL, out var);
            minLevel = var;

            Int32.TryParse(gId, out var);
            groupId = var;

            Int32.TryParse(rHZ, out var);
            realHuntingZone = var;

            Int32.TryParse(suitL, out var);
            suitableLevel = var;
        }
        public Quest()
        {

        }
    }
    public class Compensation
    {
        private int amount;
        public CompensationType Type { get; }
        public int TemplateId { get; }
        public int Amount { get { return amount; }
            private set
            {
                if (Type == CompensationType.reputationPoint)
                {
                    amount = value * 2;
                }
                else amount = value;
            }
        }

        public string GetName()
        {
            string name = "-";
            foreach (var doc in Program.ItemStrSheet)
            {
                XElement xe = FindNameElement(doc);
                if (xe != null)
                    {
                        name = xe.Attribute("string").Value;
                    }             
            }
            return name;
        }

        private XElement FindNameElement(XDocument d)
        {
            XElement xe = d.Descendants().Where(x => x.Name == "String").Where(x => x.Attribute("id").Value == TemplateId.ToString()).FirstOrDefault();
            return xe;
        }



        public Compensation(string type, string templ, string amnt)
        {
            int var;

            Type = (CompensationType)System.Enum.Parse(typeof(CompensationType), type);

            Int32.TryParse(templ, out var);
            TemplateId = var;

            Int32.TryParse(amnt, out var);
            Amount = var;
        }
    }
    public class DailyQuest
    {
        public Event Event { get; }
        public Quest Quest { get; }
        public string Name
        {
            get
            {
                XElement questNameElement = Program.StrSheet_DailyPlayGuideQuest.Descendants().Where(x => x.Name == "String").Where(x => x.Attribute("id").Value == Quest.nameId.ToString()).FirstOrDefault();
                if (questNameElement != null)
                {
                    return questNameElement.Attribute("string").Value;
                }
                else return "";
            }
        }
        public List<Compensation> CompensationList { get; set; }
        public DailyQuest(Event ev, Quest q)
        {
            Event = ev;
            Quest = q;
            CompensationList = new List<Compensation>();
        }
    }
    public enum ItemRarity
    {
        Common,
        Uncommon,
        Rare,
        Superior
    }
    public class Item
    {
        public int Id { get;  }
        public string Name { get;  }
        public string ToolTip { get;  }
        public ItemRarity Rarity { get; set; }
        public Item(int i, string n, string t, string r)
        {
            Id = i;
            Name = n;
            ToolTip = t;
            int intr;
            Int32.TryParse(r, out intr);
            Rarity = (ItemRarity)intr;
        }
        
    }
    public class Program
    {
        public static List<Item> ItemList = new List<Item>();
        public static void LoadItemsDB()
        {
            int itemCount = 0;
            int j = 0;
            while (File.Exists("C:\\Users\\Vincenzo1\\Desktop\\Progetti VS\\Tera Character Tracker\\TCTMain\\content\\tera_database\\StrSheet_Item/StrSheet_Item-" + j + ".xml"))
            {
                var doc = new XDocument();
                doc = XDocument.Load("C:\\Users\\Vincenzo1\\Desktop\\Progetti VS\\Tera Character Tracker\\TCTMain\\content\\tera_database\\StrSheet_Item/StrSheet_Item-" + j + ".xml");
                ItemStrSheet.Add(doc);
                j++;
            }
            int k = 0;
            while (File.Exists("C:\\Users\\Vincenzo1\\Desktop\\Progetti VS\\TeraDataTools-master\\TeraDataTools-master\\release\\xml\\ItemData\\ItemData-" + k + ".xml")) 
            {
                var doc = new XDocument();
                Console.Write("\rLoading ItemData-"+k+"");
                doc = XDocument.Load("C:\\Users\\Vincenzo1\\Desktop\\Progetti VS\\TeraDataTools-master\\TeraDataTools-master\\release\\xml\\ItemData\\ItemData-" + k + ".xml");
                Console.Write("\rItemData-"+k+" loaded.");
                ItemData.Add(doc);
                itemCount += doc.Descendants().Count();

                k++;
            }
            int c = 0;
            double percent = 0;
            foreach (var itDoc in ItemStrSheet)
            {

                foreach (var item in itDoc.Descendants().Where( x => x.Name == "String"))
                {
                    int id = 0;
                    Int32.TryParse(item.Attribute("id").Value, out id);
                    string tt = "";
                    if(item.Attribute("toolTip") != null)
                    {
                        tt = item.Attribute("toolTip").Value;
                    }
                    ItemList.Add(new Item(id, item.Attribute("string").Value, tt, "0"));
                    percent = ((double)c / (double)itemCount) * 100;
                    Console.Write("\rLoading items: ({0}/{1} - {2}%)", c, itemCount, (int)percent);
                    c++;
                }
            }
            int i = 0;
            percent = 0;
            foreach (var itData in ItemData)
            {       
                foreach (var item in itData.Descendants().Where(x => x.Name == "Item"))
                {
                    int rarityInt;
                    Int32.TryParse(item.Attribute("rareGrade").Value, out rarityInt);
                    ItemList[i].Rarity = (ItemRarity)rarityInt;
                    percent = (double)i / (double)itemCount * 100;
                    Console.Write("\rSetting rarity... ({0}/{1} - {2}%)        ", i, itemCount, (int)percent);
                    i++;
                }
            }

        }
        public static XDocument EventMatching = XDocument.Load("C:\\Users\\Vincenzo1\\Desktop\\Progetti VS\\Tera Character Tracker\\TCTMain\\content\\tera_database\\EventMatching.xml");
        public static XDocument DailyPlayGuideQuest = XDocument.Load("C:\\Users\\Vincenzo1\\Desktop\\Progetti VS\\Tera Character Tracker\\TCTMain\\content\\tera_database\\DailyPlayGuideQuest.xml");
        public static XDocument StrSheet_DailyPlayGuideQuest = XDocument.Load("C:\\Users\\Vincenzo1\\Desktop\\Progetti VS\\Tera Character Tracker\\TCTMain\\content\\tera_database\\StrSheet_DailyPlayGuideQuest.xml");
        public static List<XDocument> ItemStrSheet = new List<XDocument>();
        public static List<XDocument> ItemData = new List<XDocument>();
        public static List<DailyQuest> RetrieveQuests(EventType t, int minLevel)
        {
            List<DailyQuest> Quests = new List<DailyQuest>();

            foreach (XElement eventgroup in EventMatching.Descendants().Where(x => x.Name == "EventGroup").Where(x => x.Attribute("isSpecialCompensation").Value == "True"))
            {
                foreach (var @event in eventgroup.Descendants().Where(x => x.Name == "Event"))
                {

                    Event ev = new Event(@event.Attribute("id").Value,
                                         @event.Attribute("type").Value,
                                         @event.Attribute("active").Value,
                                         @event.Attribute("categoryId").Value,
                                         @event.Attribute("questId").Value,
                                         @event.Attribute("repeat").Value,
                                         @event.Attribute("requiredItemLevel").Value);

                    if (ev != null)
                    {

                        XElement dailyElement = Program.DailyPlayGuideQuest.Descendants().Where(x => x.Name == "Quest").Where(x => x.Attribute("groupId").Value == ev.questGroupId.ToString()).Where(x => x.Attribute("id").Value == ev.questNumId.ToString()).FirstOrDefault();
                        if (dailyElement != null)
                        {
                            Quest q = new Quest(dailyElement.Attribute("id").Value,
                                          dailyElement.Attribute("name").Value,
                                          dailyElement.Attribute("type").Value,
                                          dailyElement.Attribute("minLevel").Value,
                                          dailyElement.Attribute("groupId").Value,
                                          dailyElement.Attribute("realHuntingZoneId").Value,
                                          dailyElement.Attribute("suitableLevel").Value);
                            DailyQuest dq = new DailyQuest(ev, q);


                            foreach (var item in @event.Descendants().Where(x => x.Name == "Compensation"))
                            {
                                dq.CompensationList.Add(new Compensation(item.Attribute("type").Value, item.Attribute("templateId").Value, item.Attribute("amount").Value));
                            }

                            if (dq.Quest.suitableLevel >= minLevel && dq.Event.type == t)
                            {
                                Quests.Add(dq);
                            }
                        }
                    }
                }
            }
            return Quests;
        }
    
    static void Main()
        {
            //LoadItemsDB();
            //RetrieveQuests(EventType.Dungeon);
            //RetrieveQuests(EventType.Field);
            //RetrieveQuests(EventType.BattleField);
            //foreach (var dq in Quests)
            //{
            //    Console.WriteLine(" {0} - {1}", dq.Event.requiredItemLevel, dq.Name);
            //    foreach (var item in dq.CompensationList)
            //    {
            //        switch (item.Type)
            //        {
            //            case CompensationType.item:
            //                break;
            //            case CompensationType.money:
            //                Console.ForegroundColor = ConsoleColor.Yellow;
            //                break;
            //            case CompensationType.exp:
            //                Console.ForegroundColor = ConsoleColor.Cyan;
            //                break;
            //            case CompensationType.reputationPoint:
            //                Console.ForegroundColor = ConsoleColor.Magenta;
            //                break;
            //            default:
            //                break;
            //        }
            //        Console.WriteLine("\t {0} ({1})", item.Name, item.Amount);
            //        Console.ResetColor();
            //    }
            //    Console.WriteLine();
            //}
        }
    }
}

//static bool ccbEnding = false;

//class Tst
//{
//    async Task WaitCancel()
//    {
//        await Task.Delay(2000);
//    }
//    public void StartCcbDeletion()
//    {
//        Console.WriteLine("Started ccb cancel");
//        ccbEnding = true;
//        var tm = new System.Timers.Timer(2000);
//        tm.AutoReset = false;
//        tm.Elapsed += (a, b) =>
//        {
//            if (ccbEnding)
//            {
//                Console.WriteLine("CCB ended");
//            }
//        };
//        tm.Enabled = true;

//    }



//}
//static void Main(string[] args)
//{
//    var t = new Tst();

//    t.StartCcbDeletion();
//    Console.WriteLine("returned");
//    Console.ReadLine();
//}

//class Program
//{
//    public static XDocument SS_ZoneName = new XDocument();

//    static void Main()
//    {
//        SS_ZoneName = XDocument.Load("C:\\Users\\Vincenzo1\\Desktop\\Progetti VS\\Tera Character Tracker\\TCTMain\\content\\tera_database\\StrSheet_ZoneName.xml");
//        var guildQuestListParser = new GuildQuestListParser();
//        guildQuestListParser.ParseGuildListPacket

//        foreach (var item in guildQuestListParser.AvailableQuestsByZoneID())
//        {
//            var el = SS_ZoneName.Descendants().Where(x => (string)x.Attribute("id") == item.ToString()).FirstOrDefault();
//            if (el != null)
//            {
//                string zoneName = el.Attribute("string").Value;
//                //    Console.WriteLine(" Zone ID: {0} ({1})", item, zoneName);
//            }
//        }
//    }

//    class GuildQuestListParser
//    {
//        const int QUEST_COUNT_OFFSET = 4 * 2;
//        const int FIRST_ADDRESS_OFFSET = 6 * 2;
//        const int GUILD_SIZE_OFFSET = 56 * 2;


//        List<int> addressList = new List<int>();
//        List<string> questStringList = new List<string>();

//        string guildListPacket;
//        public QuestParser questParser;
//        public void ParseGuildListPacket(string p)
//        {
//            questParser = new QuestParser(p);
//            guildListPacket = p;
//            FillQuestStringList();
//        }
//        public List<int> AvailableQuestsByZoneID()
//        {
//            var list = new List<int>();
//            foreach (var item in questStringList)
//            {
//                if (questParser.GetQuestSize(item) == GetGuildSize())
//                {
//                    list.Add(questParser.GetZoneID(item));

//                }
//            }
//            return list;
//        }
//        void FillAddressList()
//        {
//            var firstAddress = StringUtils.Hex2BStringToInt(guildListPacket.Substring(FIRST_ADDRESS_OFFSET));
//            var address = firstAddress * 2;
//            addressList.Add(address);
//            bool end = false;
//            while (!end)
//            {
//                address = StringUtils.Hex2BStringToInt(guildListPacket.Substring(address + 4)) * 2;
//                if (address == 0)
//                {
//                    end = true;
//                }
//                else
//                {
//                    addressList.Add(address);
//                }
//            }
//        }
//        void FillQuestStringList()
//        {
//            FillAddressList();
//            for (int i = 0; i < addressList.Count; i++)
//            {
//                if (i == addressList.Count - 1)
//                {
//                    questStringList.Add(guildListPacket.Substring(addressList[i]));
//                }
//                else
//                {
//                    var start = addressList[i];
//                    var len = addressList[i + 1] - start;
//                    questStringList.Add(guildListPacket.Substring(start, len));
//                }
//                if (questParser.GetQuestID(questStringList[i]) == 11004)
//                {

//                    Console.WriteLine(questStringList[i]);
//                }
//            }
//        }
//        string GetGuildSize()
//        {
//            int size = StringUtils.Hex4BStringToInt(guildListPacket.Substring(GUILD_SIZE_OFFSET));
//            return ((GuildSize)size).ToString();
//        }

//        public class QuestParser
//        {
//            const int QUEST_ID_OFFSET = 22 * 2;
//            const int TARGET_LIST_ADDRESS_OFFSET = 6 * 2;
//            const int TEMPLATE_ID_OFFSET = 8 * 2;
//            const int ZONE_ID_OFFSET = 4 * 2;
//            const int QUEST_SIZE_OFFSET = 30 * 2;

//            string guildListPacket;

//            public int GetQuestID(string q)
//            {
//                int questId = StringUtils.Hex2BStringToInt(q.Substring(QUEST_ID_OFFSET));
//                return questId;
//            }
//            public int GetTemplateID(string q)
//            {
//                int targetsAddress = StringUtils.Hex2BStringToInt(q.Substring(TARGET_LIST_ADDRESS_OFFSET));
//                string targets = guildListPacket.Substring(targetsAddress * 2);

//                return StringUtils.Hex4BStringToInt(targets.Substring(TEMPLATE_ID_OFFSET));

//            }
//            public int GetZoneID(string q)
//            {
//                int targetsAddress = StringUtils.Hex2BStringToInt(q.Substring(TARGET_LIST_ADDRESS_OFFSET));
//                string targets = guildListPacket.Substring(targetsAddress * 2);
//                return StringUtils.Hex4BStringToInt(targets.Substring(ZONE_ID_OFFSET));

//            }
//            public string GetQuestSize(string q)
//            {
//                int size = StringUtils.Hex2BStringToInt(q.Substring(QUEST_SIZE_OFFSET));
//                return ((GuildSize)size).ToString();
//            }

//            public QuestParser(string p)
//            {
//                guildListPacket = p;
//            }

//        }
//    }

//    public enum GuildSize
//    {
//        Small,
//        Medium,
//        Big
//    }




